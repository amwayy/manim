from manim import *


class HTTP(Scene):
    def construct(self):
        self.play(Write(Text('您现在看到的并不是视频最终版本')))
        self.wait()
        self.clear()

        self.play(Write(Text('待补充')))
        self.wait()
        self.clear()

        server = VGroup(SVGMobject('server.svg'), Text('服务器').scale(.6)).arrange(DOWN)
        client = Group(ImageMobject('client.png').scale(.7), Text('客户端').scale(.6)).arrange(DOWN)
        Group(client, server.copy()).arrange(RIGHT, buff=1)
        self.play(Create(server))
        self.play(FadeIn(client), server.animate.next_to(client, RIGHT, buff=1))
        server.add(Text('www.bilibili.com', color=BLUE).scale(.5).next_to(server, DOWN))
        search_b = server[:2].copy()
        search_b.add(Text('search.bilibili.com', color=BLUE).scale(.5).next_to(search_b, DOWN))
        servers = VGroup(server.copy(), search_b).arrange(RIGHT)
        Group(client.copy(), servers).arrange(RIGHT, buff=1)
        domain = VGroup(SurroundingRectangle(servers, buff=.2))
        domain.add(Text('bilibili.com').scale(.6).next_to(domain, UP)).set(color=BLUE)
        self.play(Write(server[2]))
        self.play(Create(domain), Create(search_b), server.animate.move_to(servers[0]),
                  client.animate.next_to(servers, LEFT, buff=1))
        self.wait()
        self.clear()

        url = Text('URL').set_color_by_gradient(BLUE_A, BLUE_E)
        protocol = Text('协议').set_color_by_gradient(BLUE_A, BLUE_E)
        self.play(Write(url))
        self.play(FadeOut(url))
        self.play(Write(protocol))
        self.wait()
        self.clear()

        def block(name, colour, width):
            rc = VGroup(Rectangle(width=width, height=.5, fill_color=colour, fill_opacity=1), Text(name).scale(.5))
            if width == .5 or colour == BLUE:
                rc[1].set(color=BLACK)
            return rc
        request_pic = Group(ImageMobject('request.png'), ImageMobject('agent.png')).arrange(DOWN, buff=0).scale(1.2)
        request_txt = Text('请求报文').set_color_by_gradient(BLUE_A, BLUE_E).next_to(request_pic, DOWN, buff=1)
        end_line = VGroup(block('cr', WHITE, .5), block('lf', WHITE, .5)).arrange(RIGHT, buff=0)
        sp = block('sp', WHITE, .5)
        request_line = VGroup(block('方法', BLUE_E, 1), sp.copy(), block('URL', BLUE_E, 1), sp.copy(),
                              block('HTTP版本', BLUE_E, 1.5), end_line.copy()).arrange(RIGHT, buff=0)
        header_line = VGroup(block('首部字段名', BLUE, 1.8), sp.copy(), block('值', BLUE, 1), end_line.copy()
                             ).arrange(RIGHT, buff=0)
        header_lines = VGroup(header_line.copy(),
                              VGroup(Rectangle(width=4.3, height=.5, fill_color=BLUE, fill_opacity=1),
                                     Tex(r'\vdots').scale(.8)),
                              header_line.copy()).arrange(DOWN, buff=0)
        blank_line = end_line.copy()
        entity = Rectangle(width=5.5, height=1, fill_color=BLUE_A, fill_opacity=1)
        VGroup(request_line, header_lines, blank_line, entity).arrange(DOWN, buff=0)
        header_lines.align_to(request_line, LEFT)
        blank_line.align_to(request_line, LEFT)
        header_lines = VGroup(Brace(header_lines, LEFT), *header_lines)
        header_lines = VGroup(Text('首部行', color=BLUE).scale(.6).next_to(header_lines, LEFT), *header_lines)
        request_line = VGroup(Text('请求行', color=BLUE_E).scale(.6).next_to(request_line).align_to(header_lines, LEFT),
                              *request_line)
        blank_line = VGroup(Text('空行').scale(.6).next_to(blank_line).set_x(header_lines[0].get_x()), *blank_line)
        entity = VGroup(Text('正文', color=BLUE_A).scale(.6).next_to(entity).set_x(header_lines[0].get_x()), *entity)
        request = VGroup(request_line, header_lines, blank_line, entity)
        Group(request_pic.copy(), request).arrange(RIGHT, buff=1)
        methods = VGroup(Text('GET'), Text('POST'), Text('HEAD'), Text('PUT'), Text('DELETE')
                         ).scale(.8).set(color=BLUE).arrange(RIGHT, buff=.2).next_to(request_line, UP)
        http = VGroup(Text('HTTP/1.0'), Text('HTTP/1.1'), Text('HTTP/2.0'), Text('HTTPS')
                      ).scale(.6).set(color=BLUE).arrange(RIGHT, buff=.2).next_to(request_line, UP)
        self.play(Write(request_txt), FadeIn(request_pic))
        self.play(Create(request_line), request_pic.animate.next_to(request, LEFT, buff=1))
        self.play(Circumscribe(Dot([-5.9, .8, 0]), shape=Circle, buff=.2, color=BLUE),
                  ReplacementTransform(request_line[1].copy(), methods[0]))
        self.play(ReplacementTransform(request_line[1].copy(), methods[1]))
        self.play(ReplacementTransform(request_line[1].copy(), methods[2:]))
        self.play(FadeOut(methods))
        self.play(ReplacementTransform(request_line[5].copy(), http[:3]))
        self.play(Circumscribe(Dot([-5.9, .4, 0]), shape=Circle, buff=.2, color=BLUE),
                  ReplacementTransform(request_line[5].copy(), http[3]))
        self.play(FadeOut(http))
        self.play(Create(header_lines))
        self.play(Circumscribe(Rectangle(width=5, height=1.5).move_to([-4.1, -.5, 0]), buff=0, color=BLUE))
        cookie = ImageMobject('cookie.jpg').move_to(request_pic)
        self.play(FadeOut(request_pic), FadeIn(cookie))
        request[2:].shift(LEFT*3)
        self.play(FadeOut(cookie), VGroup(request_line, header_lines).animate.shift(LEFT*3))
        self.play(Create(blank_line))
        self.play(Create(entity))

        server = SVGMobject('server.svg')
        response_pic = ImageMobject('response.png').scale(1.5)
        response_txt = Text('响应报文').set_color_by_gradient(BLUE_A, BLUE_E).next_to(response_pic, DOWN, buff=1)
        response = request.copy()
        status_line = VGroup(block('HTTP版本', BLUE_E, 1.5), sp.copy(), block('状态码', BLUE_E, 1), sp.copy(),
                             block('描述', BLUE_E, 1), end_line.copy()).arrange(RIGHT, buff=0)
        response[0].become(status_line.next_to(response[1], UP, buff=0).align_to(response[1][2:], LEFT))
        response[0] = VGroup(Text('状态行', color=BLUE_E).scale(.6).next_to(status_line).align_to(response[1][0], LEFT), *status_line)
        response[3].add(Text('客户端请求对象', color=BLACK).scale(.6).move_to(response[3][1]))
        Group(request_pic.copy(), response).arrange(RIGHT, buff=1)
        status = VGroup(Text('404 Not Found'), Text('403 Forbidden')
                        ).scale(.8).arrange(DOWN).set(color=BLUE).next_to(status_line, UP)
        self.play(ReplacementTransform(VGroup(request, request_txt), server))
        self.play(ReplacementTransform(server, response_txt), FadeIn(response_pic))
        self.play(Create(response[0]), response_pic.animate.next_to(response, LEFT, buff=1))
        self.play(Circumscribe(Rectangle(width=1.3, height=.25).move_to([-4.6, .9, 0]), buff=0, color=BLUE))
        self.play(ReplacementTransform(status_line[2:5].copy(), status[0]))
        self.play(ReplacementTransform(status_line[2:5].copy(), status[1]))
        self.play(Create(response[1]))
        self.play(Circumscribe(Rectangle(width=3, height=1).move_to([-3.9, -.5, 0]), buff=0, color=BLUE))
        self.play(Create(response[2]))
        self.play(Create(response[3]))
        self.wait()
        self.clear()

        search_all = ImageMobject('search_all.png')
        url_loc = Dot([-4, 3.5, 0])
        url_all = Text('search.bilibili.com/all?keyword=安木CS学习笔记').scale(.8).move_to(url_loc)
        self.play(FadeIn(search_all))
        self.play(FadeOut(search_all), AnimationGroup(FadeIn(url_all), url_all.animate.move_to(ORIGIN)))
        self.play(Indicate(url_all[20:23]))
        self.play(FadeIn(search_all), AnimationGroup(FadeOut(url_all), url_all.animate.move_to(url_loc)))
        self.wait()
        self.clear()

        search_video = ImageMobject('search_video.png')
        url_video = Text('search.bilibili.com/video?keyword=安木CS学习笔记').scale(.8).move_to(url_loc)
        self.play(FadeIn(search_video))
        self.play(FadeOut(search_video), AnimationGroup(FadeIn(url_video), url_video.animate.move_to(ORIGIN)))
        self.play(Indicate(url_video[20:25]))
        self.play(Indicate(url_video[25], scale_factor=2))
        self.play(Circumscribe(url_video[26:]))
        self.play(FadeIn(search_video), AnimationGroup(FadeOut(url_video), url_video.animate.move_to(url_loc)))
        self.wait()
        self.clear()

        search_order = ImageMobject('search_order.png')
        url_order = Text('search.bilibili.com/video?keyword=安木CS学习笔记&order=click').scale(.7).move_to(url_loc)
        self.play(FadeIn(search_order))
        self.play(FadeOut(search_order), AnimationGroup(FadeIn(url_order), url_order.animate.move_to(ORIGIN)))
        self.play(Indicate(url_order[-11:]))
        server = SVGMobject('server.svg').next_to(url_order, DOWN)
        client = SVGMobject('client.svg').scale(.8).next_to(url_order, UP)
        func = Text('video(keyword, order)', color=BLUE).scale(.6).next_to(server, DOWN)
        self.play(ReplacementTransform(url_order.copy(), func), Create(server))
        self.play(ReplacementTransform(func, client))
        self.wait()
        self.clear()


class DNS(Scene):
    def construct(self):
        server = SVGMobject('server.svg')

        def ser(name):
            return VGroup(server.copy().scale(.7), Text(name, color=BLUE_B).scale(.5)).arrange(DOWN)
        bilibili = Text('www.bilibili.com', color=BLUE)
        ip_txt = Text('IP地址').set_color_by_gradient(BLUE_A, BLUE_E)
        VGroup(bilibili, ip_txt).arrange(DOWN, buff=1)
        ip = Text('139.159.241.37', color=BLUE).move_to(ip_txt)
        multi_ip = VGroup(Text('139.159.241.37'), Text('110.43.34.66'), Text('119.3.70.188')
                          ).arrange(DOWN).align_to(ip, UP).set(color=BLUE)
        alias = Text('bilibili.com', color=BLUE)
        VGroup(bilibili.copy(), alias).arrange(RIGHT, buff=.5).next_to(ip_txt, UP, buff=1)
        dns = VGroup(server.copy(), Text('DNS').scale(.6)).arrange(DOWN)
        self.play(Write(bilibili))
        self.play(ReplacementTransform(bilibili.copy(), ip_txt))
        self.play(ReplacementTransform(ip_txt, ip))
        self.play(Write(alias), bilibili.animate.next_to(alias, LEFT))
        self.play(bilibili.animate.next_to(ip, UP, buff=1), FadeOut(alias))
        self.play(ReplacementTransform(ip, multi_ip))
        self.play(ReplacementTransform(multi_ip, ip))
        self.play(ReplacementTransform(VGroup(bilibili, ip), dns))
        self.play(dns.animate.scale(.7))
        self.play(dns.animate.to_edge(UP, buff=.2))
        root_txt = Text('根', color=BLUE).scale(.6).next_to(dns[0], DOWN)
        tld = VGroup(ser('com'), ser('org'), ser('edu')).arrange(RIGHT, buff=1).next_to(root_txt, DOWN, buff=.6)
        tld = VGroup(Text('顶级域', color=BLUE).scale(.6).next_to(tld, LEFT), *tld)
        authority = VGroup(ser('bilibili.com'), ser('youtube.com'), ser('wikipedia.org'), ser('nyu.edu'),
                           ser('umass.edu'))
        authority[:2].arrange(RIGHT).next_to(tld[1], DOWN, buff=.6)
        authority[2].next_to(tld[2], DOWN, buff=.6)
        authority[2][1].shift(DOWN*.3)
        authority[3:].arrange(RIGHT).next_to(tld[3], DOWN, buff=.6)
        authority = VGroup(Text('权威', color=BLUE).scale(.6).next_to(authority, LEFT), *authority)
        arrow_root = VGroup(Line(root_txt.get_bottom(), tld[1].get_top(), buff=.1),
                            Line(root_txt.get_bottom(), tld[2].get_top(), buff=.1),
                            Line(root_txt.get_bottom(), tld[3].get_top(), buff=.1))
        arrow_tld = VGroup(Line(tld[1].get_bottom(), authority[1].get_top(), buff=.1),
                           Line(tld[1].get_bottom(), authority[2].get_top(), buff=.1),
                           Line(tld[2].get_bottom(), authority[3].get_top(), buff=.1),
                           Line(tld[3].get_bottom(), authority[4].get_top(), buff=.1),
                           Line(tld[3].get_bottom(), authority[5].get_top(), buff=.1))
        isp = VGroup(Text('ISP').scale(.6), Circle(1)
                     ).arrange(DOWN).set(color=YELLOW_E).next_to(dns, LEFT, buff=1).shift(DOWN*.3)
        local = ser('本地')
        local[1].set(color=BLUE).shift(UP*.2)
        local.move_to(isp[1])
        client = SVGMobject('client.svg').scale(.7).next_to(local[0], LEFT, buff=1)
        request = VGroup(Arrow(client.get_right(), local[0].get_left()).shift(UP*.1),
                         Arrow(local[0].get_right(), dns[0].get_left()).shift(UP*.1),
                         Arrow(dns[0].get_left(), local[0].get_right()).shift(DOWN*.1),
                         Arrow(local.get_bottom(), tld[1].get_top(), buff=0).shift(LEFT*.1),
                         Arrow(tld[1].get_top(), local.get_bottom(), buff=0).shift(RIGHT*.1),
                         CurvedArrow(local.get_corner(DL), authority[1].get_corner(UL)).shift(LEFT*.1),
                         CurvedArrow(authority[1].get_corner(UL), local.get_corner(DL), angle=-PI/2).shift(RIGHT*.1),
                         Arrow(local[0].get_left(), client.get_right()).shift(DOWN*.1)).set(color=YELLOW_E)
        arrow_cache = Arrow(local[0].get_left(), client.get_right(), color=YELLOW_E)
        self.play(ReplacementTransform(dns[1], root_txt))
        self.play(Create(VGroup(arrow_root, tld[0], tld[1][0], tld[2][0], tld[3][0])), run_time=3)
        self.play(Write(VGroup(tld[1][1], tld[2][1], tld[3][1])))
        self.play(Create(VGroup(arrow_tld, authority)), run_time=3)
        self.play(Create(VGroup(isp, local)))
        self.play(Create(client))
        self.play(Create(request), run_time=8)
        self.play(FadeOut(request))
        self.play(ReplacementTransform(VGroup(dns, tld[1], authority[1]).copy(), local))
        self.play(Create(arrow_cache))
        self.wait()
        self.clear()

        # def dns_ser(name):
        #     return VGroup(server.copy().scale(.7), Text(name, color=BLUE).scale(.5)).arrange(DOWN)
        # dns_message = VGroup(*[VGroup(*[Rectangle(width=1.5, height=.5, fill_opacity=1) for _ in range(2)]
        #                               ).arrange(RIGHT, buff=0) for _ in range(3)],
        #                      *[Rectangle(width=3, height=.5, fill_opacity=1) for _ in range(4)]
        #                      ).arrange(DOWN, buff=0).set_color_by_gradient(BLUE_A, BLUE_E)
        # text = ['编号', '标志', '问题数', '回答RR数', '权威RR数', '附加RR数', '问题', '回答', '权威', '附加信息']
        # for index in range(10):
        #     if index < 6:
        #         dns_message.add(Text(text[index], color=BLACK
        #                              ).scale(.5).move_to(dns_message[int(index/2)][int(index % 2)]).set_z_index(1))
        #     else:
        #         dns_message.add(Text(text[index]).scale(.5).move_to(dns_message[index-3]).set_z_index(1))
        # bits16 = VGroup(Brace(dns_message[0][0], UP))
        # bits16.add(Text('16位').scale(.5).next_to(bits16, UP))
        # rr = VGroup(Text('资源记录').set_color_by_gradient(BLUE_A, BLUE_E),
        #             Text('(Name, Value, Type, TTL)', color=BLUE).scale(.6)).arrange(DOWN)
        # VGroup(dns_message.copy(), rr).arrange(RIGHT)
        # type_a = Text('主机名, IP地址, A', color=BLUE).scale(.5).move_to(rr[1][1:16])
        # type_ns = Text('域名, 权威, NS', color=BLUE).scale(.5).move_to(rr[1][1:16])
        # type_cname = Text('化名, 规范名, CNAME', color=BLUE).scale(.5).move_to(rr[1][1:16])
        # ttl = Text('time to live', color=BLUE).scale(.5).next_to(rr[1][17:20], DOWN)
        # self.play(Create(dns_message))
        # self.play(Create(bits16))
        # self.play(FadeOut(bits16))
        # self.play(Indicate(dns_message[0][1]))
        # self.play(Wiggle(dns_message[1:7]))
        # self.play(ReplacementTransform(dns_message[4].copy(), rr[0]), dns_message.animate.next_to(rr, LEFT))
        # self.play(Write(rr[1]))
        # self.play(FadeOut(rr[1][1:16]), Write(type_a))
        # self.play(ReplacementTransform(type_a, type_ns))
        # self.play(ReplacementTransform(type_ns, type_cname))
        # self.play(ReplacementTransform(type_cname, rr[1][1:16]))
        # self.play(ReplacementTransform(rr[1][17:20].copy(), ttl))
        # self.play(FadeOut(ttl))
        # self.play(FadeOut(rr))
        #
        # local = dns_ser('本地').next_to(dns_message, RIGHT)
        # tld = dns_ser('顶级域').next_to(local, RIGHT, buff=1.5).shift(UP*1.5)
        # arrow_lt = Arrow(local.get_corner(UR), tld.get_left(), color=YELLOW_E).shift(DOWN*.1)
        # arrow_tl = VGroup(Arrow(tld.get_left(), local.get_corner(UR), color=YELLOW_E).shift(UP*.1))
        # arrow_tl.add(Text('Type NS\nType A', color=YELLOW_E).scale(.4).rotate(PI/8).next_to(arrow_tl, UP, buff=-.1))
        # authority = dns_ser('权威').next_to(local, RIGHT, buff=1.5).shift(DOWN*1.5)
        # arrow_la = Arrow(local.get_corner(DR), authority.get_left(), color=YELLOW_E).shift(UP*.1)
        # arrow_al = VGroup(Arrow(authority.get_left(), local.get_corner(DR), color=YELLOW_E).shift(DOWN*.1))
        # arrow_al.add(Text('Type A', color=YELLOW_E).scale(.4).rotate(-PI/8).next_to(arrow_al, DOWN, buff=-.1))
        # self.play(Create(VGroup(local, arrow_lt, tld)))
        # self.play(Create(arrow_tl))
        # self.play(Create(VGroup(arrow_la, authority)))
        # self.play(Create(arrow_al))
        # self.play(FadeOut(local, tld, arrow_lt, arrow_tl, authority, arrow_la, arrow_al))
        # self.play(Indicate(dns_message[5]))
        # self.wait()
        # self.clear()
        #
        # cdn_txt = Text('CDN(Content Distribution Networks)').set_color_by_gradient(BLUE_A, BLUE_E)
        # self.play(Write(cdn_txt))
        # self.wait()
        # self.clear()
        #
        # local = dns_ser('本地')
        # client = SVGMobject('client.svg').scale(.7).next_to(local[0], LEFT, buff=1)
        # arrow_cl = Arrow(client.get_right(), local[0].get_left(), color=YELLOW_E).shift(UP*.1)
        # bilibili_authority = dns_ser('bilibili权威DNS')
        # cdn_authority = dns_ser('CDN权威DNS')
        # VGroup(bilibili_authority, cdn_authority).arrange(DOWN, buff=1).next_to(local, RIGHT, buff=1)
        # arrow_lba = Arrow(local[0].get_right(), bilibili_authority[0].get_left(), color=YELLOW_E).shift(UP*.3)
        # arrow_bal = Arrow(bilibili_authority[0].get_left(), local[0].get_right(), color=YELLOW_E)
        # arrow_lca = DoubleArrow(local[0].get_right(), cdn_authority[0].get_left(), color=YELLOW_E).shift(DOWN*.1)
        # arrow_lc = Arrow(local[0].get_left(), client.get_right(), color=YELLOW_E).shift(DOWN*.1)
        # cdn_content = dns_ser('CDN内容').next_to(client, DOWN, buff=1)
        # arrow_cc = DoubleArrow(client.get_bottom(), cdn_content.get_top(), color=YELLOW_E)
        # bilibili = dns_ser('bilibili').next_to(cdn_content, RIGHT, buff=1)
        # arrow_cb = DoubleArrow(cdn_content[0].get_right(), bilibili[0].get_left(), color=YELLOW_E)
        # web_cache = Text('Web缓存/代理服务器').set_color_by_gradient(BLUE_A, BLUE_E).to_edge(UP)
        # cond_get = Text('条件GET').set_color_by_gradient(BLUE_A, BLUE_E).next_to(cdn_content[0], LEFT)
        # dash = Text('DASH').set_color_by_gradient(BLUE_A, BLUE_E).next_to(cdn_content[0], LEFT)
        # arrow_bc = Arrow(bilibili.get_corner(UL), client.get_corner(DR), color=YELLOW_E)
        # manifest = Text('告示文件', color=YELLOW_E
        #                 ).scale(.4).rotate(-PI/3.5).next_to(arrow_bc, RIGHT, buff=-.2).shift(UP*.1)
        # self.play(Create(VGroup(client, arrow_cl, local, arrow_lba, bilibili_authority)))
        # self.play(Create(arrow_bal))
        # self.play(Create(VGroup(arrow_lca, cdn_authority)))
        # self.play(Create(arrow_lc))
        # self.play(Create(VGroup(arrow_cc, cdn_content)))
        # self.play(Create(VGroup(arrow_cb, bilibili)))
        # self.play(Write(web_cache))
        # self.play(Write(cond_get))
        # self.play(FadeOut(cond_get))
        # self.play(Write(dash))
        # self.play(Create(arrow_bc), Write(manifest))
        # self.wait()
        # self.clear()
        #
        # cdn = dns_ser('CDN').shift(RIGHT*.75, DOWN*.5)
        # client = SVGMobject('client.svg').scale(.7).next_to(cdn[0], LEFT, buff=1.5)
        # arrow_ccdn = VGroup(Arrow(client.get_right(), cdn[0].get_left(), color=YELLOW_E).shift(UP*.1))
        # arrow_ccdn.add(Text('请求报文', color=YELLOW_E).scale(.4).next_to(arrow_ccdn, UP))
        # bilibili = dns_ser('bilibili').next_to(cdn, RIGHT, buff=1)
        # arrow_cb = DoubleArrow(cdn[0].get_right(), bilibili[0].get_left(), color=YELLOW_E)
        # dns = dns_ser('DNS').next_to(cdn, UP, buff=.5)
        # arrow_cd = DoubleArrow(client.get_corner(UR), dns[0].get_left(), color=YELLOW_E, tip_length=.3)
        # arrow_cdnc = VGroup(Arrow(cdn[0].get_left(), client.get_right(), color=YELLOW_E).shift(DOWN*.1))
        # arrow_cdnc.add(Text('响应报文', color=YELLOW_E).scale(.4).next_to(arrow_cdnc, DOWN))
        # self.play(Create(VGroup(client, arrow_ccdn, cdn)))
        # self.play(Create(VGroup(arrow_cb, bilibili)))
        # self.play(Create(VGroup(arrow_cd, dns)))
        # self.play(Create(arrow_cdnc))
        # self.wait()
        # self.clear()


class Update(Scene):
    def construct(self):
        url_loc = Dot([-4, 3.5, 0])
        url_pic = ImageMobject('url.png')
        url = Text('www.bilibili.com/video/BV11D4y1k7mk').move_to(url_loc)
        self.add(url_pic)
        self.play(FadeOut(url_pic), url.animate.move_to(ORIGIN))
        url_txt = Text('URL').set_color_by_gradient(BLUE_A, BLUE_E).next_to(url, DOWN)
        self.play(Write(url_txt))
        self.play(FadeOut(url, url_txt))

        https_pic = ImageMobject('https.png')
        https_url = Text('https://www.bilibili.com/video/BV11D4y1k7mk').scale(.8).move_to(url_loc)
        self.add(https_pic)
        self.play(FadeOut(https_pic), https_url.animate.move_to(ORIGIN))
        self.play(Indicate(https_url[:5]))
        protocol = Text('协议').set_color_by_gradient(BLUE_A, BLUE_E).next_to(https_url, DOWN)
        server = SVGMobject('server.svg')
        client = SVGMobject('client.svg').scale(.7)
        VGroup(client, server).arrange(RIGHT, buff=1.5).next_to(https_url, UP)
        arrow_cs = DoubleArrow(client.get_right(), server.get_left(), color=YELLOW_E)
        self.play(Write(protocol))
        self.play(Create(VGroup(client, arrow_cs, server)))
        self.wait()
        self.clear()
